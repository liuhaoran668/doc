from PyQt5.QtWidgets import QMainWindow, QSplitter, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QSlider, QPushButton, QLineEdit, QMessageBox, QSpacerItem, QSizePolicy
from PyQt5.QtCore import Qt
import rospy, rospkg, yaml
from sensor_msgs.msg import JointState
from std_msgs.msg import Header
import sys
import threading
global package_path
# 创建 rospkg.RosPack 对象
rospack = rospkg.RosPack()
# 获取指定包的路径
package_sdk = "linker_hand_sdk_ros"
package_gui = "gui_control"
sdk_path = rospack.get_path(package_sdk)
gui_path = rospack.get_path(package_gui)
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        # 初始化 ROS 节点
        rospy.init_node('gui_control', anonymous=True)
        self.load_yaml()
        hand_joint = rospy.get_param('~hand_joint', default="L20")  # 默认获取全局参数
        hand_type = rospy.get_param('~hand_type', default="left")  # 默认获取全局参数
        self.hand_type = hand_type
        self.hand_joint = hand_joint
        self.load_action_yaml()
        self.init_pos = [255] * 10
        if hand_joint == "L25":
            # L25
            self.init_pos = [255] * 25
            self.joint_name = ["拇指根部", "食指根部", "中指根部", "无名指根部","预留","拇指侧摆","食指侧摆","中指侧摆","无名指侧摆","预留","拇指横摆","预留","预留","预留","预留","拇指中部","食指中部","中指中部","无名指中部","预留","拇指尖部","食指尖部","中指尖部","无名指尖部","预留"]
        elif hand_joint == "L20":
            self.init_pos = [255,255,255,255,255,255,10,100,180,240,245,255,255,255,255,255,255,255,255,255]
            # L20
            self.joint_name = ["拇指根部", "食指根部", "中指根部", "无名指根部","小指根部","拇指侧摆","食指侧摆","中指侧摆","无名指侧摆","小指侧摆","拇指横摆","预留","预留","预留","预留","拇指尖部","食指末端","中指末端","无名指末端","小指末端"]
        elif hand_joint == "L10":
            # L10
            self.init_pos = [255] * 10
            self.joint_name = ["拇指根部", "拇指侧摆","食指根部", "中指根部", "无名指根部","小指根部","食指侧摆","无名指侧摆","小指侧摆","拇指横摆"]

        self.setWindowTitle(f"hand:{self.hand_type} {hand_joint} joint Control - Qt5 with ROS")
        self.setGeometry(100, 100, 600, 800)
        if self.hand_type == "left":
            self.hand_pub = rospy.Publisher('/cb_left_hand_control_cmd', JointState, queue_size=10)
        elif self.hand_type == "right":
            self.hand_pub = rospy.Publisher('/cb_right_hand_control_cmd', JointState, queue_size=10)
        self.rate = rospy.Rate(100)  # 100 Hz
        '''
        # 主窗口容器
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # 创建垂直布局
        layout = QVBoxLayout(central_widget)
        '''
        # 创建分割线
        splitter = QSplitter(Qt.Horizontal)
        splitter.setStyleSheet("""
            QSplitter::handle {
                background-color: lightgray;
                margin: 15px 20px;
            }
        """)

        # 左侧窗口
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        # 存储滑动条和标签
        self.sliders = []
        self.labels = []

        # 创建25个滑动条
        for i in range(len(self.joint_name)):
            # 每个滑动条和标签的水平布局
            slider_layout = QHBoxLayout()

            # 标签显示滑动条的值
            label = QLabel(f"{self.joint_name[i]}: 255", self)
            label.setFixedWidth(100)  # 设置固定宽度
            self.labels.append(label)
            slider_layout.addWidget(label)

            # 滑动条
            slider = QSlider(Qt.Horizontal, self)
            slider.setRange(0, 255)
            slider.setValue(self.init_pos[i])
            slider.setFixedHeight(15)  # 设置滑动条高度为15
            #slider.valueChanged.connect(lambda value, index=i: self.update_label(index, value))
            self.sliders.append(slider)
            slider_layout.addWidget(slider)

            # 添加到主布局
            left_layout.addLayout(slider_layout)
        # 右侧窗口
        right_widget = QWidget()
        self.right_layout = QVBoxLayout(right_widget)
        # 创建输入框和按钮的水平布局
        input_layout = QHBoxLayout()
        self.input_field = QLineEdit(self)
        input_button = QPushButton("获取内容", self)
        input_button.setFixedHeight(25)
        input_button.clicked.connect(self.get_input_content)
        input_layout.addWidget(self.input_field)
        input_layout.addWidget(input_button)
        self.right_layout.addLayout(input_layout)
        self.buttons = []
        print(self.action_yaml)
        # 创建按钮
        for i in range(len(self.action_yaml)):
            button = QPushButton(self.action_yaml[i]["ACTION_NAME"], self)
            button.setFixedWidth(100)
            self.buttons.append(button)
            self.right_layout.addWidget(button)
            # 添加垂直间距
            self.right_layout.addSpacerItem(QSpacerItem(20, 10, QSizePolicy.Minimum, QSizePolicy.Fixed))
        self.right_layout.addStretch()  # 确保按钮基于顶部排列
        splitter.addWidget(left_widget)
        splitter.addWidget(right_widget)
        # 设置窗口左边最小宽度
        splitter.setSizes([600,400])
        self.setCentralWidget(splitter)
        # 每秒发送 100 次
        self.running = True
        self.udp_thread = threading.Thread(target=self.send_ros_data)
        self.udp_thread.start()

    def send_ros_data(self):
        while self.running and not rospy.is_shutdown():
            slider_values = [slider.value() for slider in self.sliders]
            data = ",".join(map(str, slider_values))
            msg = self.joint_msg(data)
            #print(msg.position)
            self.hand_pub.publish(msg)
            self.rate.sleep()
    def get_input_content(self):
        content = self.input_field.text()
        if self.hand_type == "left":
            topic = "/cb_left_hand_control_cmd"
        else:
            topic = "/cb_right_hand_control_cmd"
        # 当前手数据
        current_hand_pos = rospy.wait_for_message(topic=topic,topic_type=JointState,timeout=0.3)
        print(current_hand_pos)
        # 弹出提示框
        QMessageBox.information(self, "输入框内容", f"输入框内容: {content}")
        # 将输入框内容写入yaml文件
        self.write_to_yaml(content, current_hand_pos.position)
        self.refresh_buttons()
    # 刷新所有按钮
    def refresh_buttons(self):
        print(self.buttons)
        # 清除现有按钮
        for button in self.buttons:
            button.setParent(None)
        self.buttons.clear()

        # 重新加载 yaml 文件
        self.load_action_yaml()
        for action in self.action_yaml:
            button = QPushButton(action["ACTION_NAME"], self)
            button.setFixedWidth(100)
            button.clicked.connect(lambda checked, a=action: self.execute_action(a))
            self.buttons.append(button)
            self.right_layout.addWidget(button)
            # 添加垂直间距
            self.right_layout.addSpacerItem(QSpacerItem(20, 10, QSizePolicy.Minimum, QSizePolicy.Fixed))
        # 确保按钮基于顶部排列
        self.right_layout.addStretch()
    def execute_action(self, action):
        # 执行按钮对应的动作
        print(f"Executing action: {action['ACTION_NAME']}")
        # 这里可以添加执行动作的代码
    def joint_msg(self, data):
        """创建 JointState 消息"""
        msg = JointState()
        msg.header = Header()
        msg.header.stamp = rospy.Time.now()
        msg.name = []
        msg.position = [float(i) for i in data.split(",")]
        return msg

    def update_label(self, index, value):
        self.labels[index].setText(f"{self.joint_name[index]}: {value}")

    def closeEvent(self, event):
        """关闭窗口时停止线程并释放资源"""
        self.running = False
        self.udp_thread.join()  # 等待线程退出
        event.accept()


    def load_yaml(self):
        try:
            settings_yaml_path = sdk_path + "/config/setting.yaml"
            with open(settings_yaml_path, 'r', encoding='utf-8') as file:
                config = yaml.safe_load(file)
                self.config = config
                self.sdk_version = config["VERSION"]
                self.left_hand_exists = config['LINKER_HAND']['LEFT_HAND']['EXISTS']
                self.left_hand_names = config['LINKER_HAND']['LEFT_HAND']['NAME']
                self.left_hand_joint = config['LINKER_HAND']['LEFT_HAND']['JOINT']
                self.left_hand_force = config['LINKER_HAND']['LEFT_HAND']['TOUCH']
                self.right_hand_exists = config['LINKER_HAND']['RIGHT_HAND']['EXISTS']
                self.right_hand_names = config['LINKER_HAND']['RIGHT_HAND']['NAME']
                self.right_hand_joint = config['LINKER_HAND']['RIGHT_HAND']['JOINT']
                self.right_hand_force = config['LINKER_HAND']['RIGHT_HAND']['TOUCH']
                self.password = config['PASSWORD']
        except Exception as e:
            rospy.logerr(f"Error reading setting.yaml: {e}")

    def load_action_yaml(self):
        action_path = gui_path + "/config/"
        if self.hand_joint == "L20":
            action_path = action_path + "L20_action.yaml"
        elif self.hand_joint == "L10":
            action_path = action_path + "L10_action.yaml"
        elif self.hand_joint == "L25":
            action_path = action_path + "L25_action.yaml"
        try:
            with open(action_path, 'r', encoding='utf-8') as file:
                yaml_data = yaml.safe_load(file)
                if self.hand_type == "left":
                    self.action_yaml = yaml_data["LEFT_HAND"]
                elif self.hand_type == "right":
                    self.action_yaml = yaml_data["RIGHT_HAND"]
        except Exception as e:
            rospy.logerr(f"yaml配置文件不存在: {e}")

    def write_to_yaml(self, action_name, action_pos):
        action_path = gui_path + "/config/"
        if self.hand_joint == "L20":
            action_path = action_path + "L20_action.yaml"
        elif self.hand_joint == "L10":
            action_path = action_path + "L10_action.yaml"
        elif self.hand_joint == "L25":
            action_path = action_path + "L25_action.yaml"
        try:
            with open(action_path, 'r', encoding='utf-8') as file:
                yaml_data = yaml.safe_load(file)
            if self.hand_type == "left":
                yaml_data["LEFT_HAND"].append({"ACTION_NAME": action_name, "ACTION_POS": action_pos})
            elif self.hand_type == "right":
                yaml_data["RIGHT_HAND"].append({"ACTION_NAME": action_name, "ACTION_POS": action_pos})
            with open(action_path, 'w', encoding='utf-8') as file:
                yaml.safe_dump(yaml_data, file)
        except Exception as e:
            rospy.logerr(f"Error writing to yaml file: {e}")
# 主程序运行
if __name__ == "__main__":
    import sys
    from PyQt5.QtWidgets import QApplication
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())