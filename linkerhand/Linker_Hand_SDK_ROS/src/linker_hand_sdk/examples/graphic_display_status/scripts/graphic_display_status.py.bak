#!/usr/bin/env python3
import rospy,rospkg
import signal
from sensor_msgs.msg import JointState
from std_msgs.msg import String
import can
import json
import yaml
import time
import threading
import sys
import os
import subprocess
from PyQt5.QtWidgets import QMainWindow, QSplitter, QApplication,QMessageBox,QPushButton
from PyQt5.QtCore import Qt, QTimer
from std_msgs.msg import Header, Float32MultiArray
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from utils.load_write_yaml import LoadWriteYaml
from utils.color_msg import ColorMsg
from views.temperature_plot import TemperaturePlot
from views.wave_form_plot import WaveformPlot

class GraphicDisplayStatus:
    def __init__(self):
        self._init_hand()
        # 初始化 ROS 节点
        rospy.init_node('graphic_display_status', anonymous=True)
        self.rate = rospy.Rate(30)
        self.motor_temperature = [0] * 5
        if self.hand_type == "left":
            self.force_sub = rospy.Subscriber("/cb_left_hand_force",Float32MultiArray,self.get_force_data,queue_size=1)
            self.info_sub = rospy.Subscriber("/cb_left_hand_info",String,self.get_info_data,queue_size=1)
        elif self.hand_type == "right":
            self.force_sub = rospy.Subscriber("/cb_right_hand_force",Float32MultiArray,self.get_force_data,queue_size=1)
            self.info_sub = rospy.Subscriber("/cb_right_hand_info",String,self.get_info_data,queue_size=1)
        self.colse_sdk_sub = rospy.Subscriber("/close_sdk",String,self.close_sdk,queue_size=1)
        self._init_temperature_plot()
        self._init_normal_force_plot() # 法向压力波形图
        self._init_approach_inc_plot() # 接近感应波形图
    def close_sdk(self,msg):
        data = json.loads(msg.data)
        if data["close_sdk"] == True:
            self.closeEvent(event=True)
    def _init_hand(self):
        self.yaml = LoadWriteYaml() # 初始化配置文件
        # 读取配置文件
        self.setting = self.yaml.load_setting_yaml()
        # 判断左手是否配置
        self.left_hand = False
        self.right_hand = False
        if self.setting['LINKER_HAND']['LEFT_HAND']['EXISTS'] == True:
            self.left_hand = True
        elif self.setting['LINKER_HAND']['RIGHT_HAND']['EXISTS'] == True:
            self.right_hand = True
        # gui控制只支持单手，这里进行左右手互斥
        if self.left_hand == True and self.right_hand == True:
            self.left_hand = True
            self.right_hand = False
        if self.left_hand == True:
            print("左手")
            self.hand_exists = True
            self.hand_joint = self.setting['LINKER_HAND']['LEFT_HAND']['JOINT']
            self.hand_type = "left"
        if self.right_hand == True:
            print("右手")
            self.hand_exists = True
            self.hand_joint = self.setting['LINKER_HAND']['RIGHT_HAND']['JOINT']
            self.hand_type = "right"
    
    def _init_temperature_plot(self):
        # 初始化温度波形图
        self.temperature_plot = TemperaturePlot(num_lines=10, labels=None, title=f"{self.hand_type}手电机温度波形图")
        self.temperature_plot.setGeometry(700, 1000, 800, 400)
        self.temperature_plot.show()
        self.timer3 = QTimer()
        self.timer3.timeout.connect(self.update_temperature_plot)
        self.timer3.start(50)
    # 更新温度波形图
    def update_temperature_plot(self):
        self.temperature_plot.update_data(self.motor_temperature)
    # 更新温度数据
    def get_info_data(self, msg):
        data = json.loads(msg.data)
        if self.left_hand == True:
            self.motor_temperature = list(data["left_hand"]["motor_temperature"])
        elif self.right_hand == True:
            self.motor_temperature = list(data["right_hand"]["motor_temperature"])
    # 获取压感数据
    def get_force_data(self,force_data):
        data = force_data.data
        self.last_normal_force = data[:5]
        self.last_approach_inc = data[10:15]

    # 初始化压感图形
    def _init_normal_force_plot(self): 
        # 初始化波形图
        self.normal_force_plot = WaveformPlot(num_lines=5, labels=["thumb","index finger","middle finger","ring finger","little finger"],title="法向压力波形图")
        # 设置波形图位置
        self.normal_force_plot.setGeometry(700, 100, 800, 400)
        self.normal_force_plot.show()
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_normal_force_plot)
        self.timer.start(50)

    # 初始化接近感应波形图
    def _init_approach_inc_plot(self):
        # 初始化接近感应波形图
        self.approach_inc_plot = WaveformPlot(num_lines=5, labels=["thumb","index finger","middle finger","ring finger","little finger"],title="接近感应波形图")
        # 设置波形图位置
        self.approach_inc_plot.setGeometry(700, 600, 800, 400)
        self.approach_inc_plot.show()
        self.timer2 = QTimer()
        self.timer2.timeout.connect(self.update_approach_inc_plot)
        self.timer2.start(50)

    # 获取压感数据
    def get_force_data(self,force_data):
        data = force_data.data
        self.last_normal_force = data[:5]
        self.last_approach_inc = data[10:15]

    # 更新法向压力波形图
    def update_normal_force_plot(self): 
        self.normal_force_plot.update_data(self.last_normal_force)
    # 更新接近感应波形图
    def update_approach_inc_plot(self):
        converted_list = []
        # 遍历原始列表并进行转换
        for value in self.last_approach_inc:
            # 由于值是从 255 递减到 0，所以 255 - value 就能得到 0 到 255 的范围
            new_value = 255 - value
            converted_list.append(new_value)
        self.approach_inc_plot.update_data(converted_list)

    def closeEvent(self, event):
        # 关闭波形图窗口
        self.normal_force_plot.close() # 法向压力波形图
        self.approach_inc_plot.close() # 接近感应波形图
        self.temperature_plot.close()
        #self.close()

    
# 主程序运行
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = GraphicDisplayStatus()
    #window.show()
    
    sys.exit(app.exec_())




