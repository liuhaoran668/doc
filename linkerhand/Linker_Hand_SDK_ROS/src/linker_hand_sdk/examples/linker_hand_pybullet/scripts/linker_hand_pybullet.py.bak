import rospy,rospkg
import pybullet as p
import pybullet_data
import time
from std_msgs.msg import String,Header
from sensor_msgs.msg import JointState
'''
五指全部展开
rostopic pub /cb_left_hand_control_cmd sensor_msgs/JointState "{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: ''}, name: [], position: [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0,0,0,0,0,0,0,0], velocity: [], effort: []}" -r 10
五指根部弯曲
rostopic pub /cb_left_hand_control_cmd sensor_msgs/JointState "{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: ''}, name: [], position: [-1.05,1.66,1.66,1.66,1.66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], velocity: [], effort: []}" -r 10
五指横摆
rostopic pub /cb_left_hand_control_cmd sensor_msgs/JointState "{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: ''}, name: [], position: [0.0,0.0,0.0,0.0,0.0,1.45,-0.26,-0.26,-0.26,-0.26,0,0,0,0,0,0,0,0,0,0], velocity: [], effort: []}" -r 10
单独大拇指侧摆
rostopic pub /cb_left_hand_control_cmd sensor_msgs/JointState "{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: ''}, name: [], position: [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.84,0,0,0,0,0,0,0,0,0], velocity: [], effort: []}" -r 10

五指中关节弯曲
rostopic pub /cb_left_hand_control_cmd sensor_msgs/JointState "{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: ''}, name: [], position: [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.32,1.36,1.36,1.36,1.36], velocity: [], effort: []}" -r 10
'''
#
#urdf_path_left = rospack.get_path('linker_hand_pybullet') + "/urdf/linker_hand_l20_8_left.urdf"
class LinkerHandPybullet:
    def __init__(self):
        rospack = rospkg.RosPack()
        urdf_path_left = rospack.get_path('linker_hand_pybullet') + "/urdf/linker_hand_l20_8_left.urdf"
        urdf_path_right = rospack.get_path('linker_hand_pybullet') + "/urdf/linker_hand_l20_8_right.urdf"
        self.left_hand_sim_position = [0] * 26
        self.right_hand_sim_position = [0] * 26
        # 连接到仿真
        physics_client = p.connect(p.GUI)
        p.setAdditionalSearchPath(pybullet_data.getDataPath())
        # 加载 URDF 左手
        self.left_hand_id = p.loadURDF(urdf_path_left, basePosition=[0, -0.1, 0.1], useFixedBase=True)
        self.right_hand_id = p.loadURDF(urdf_path_right, basePosition=[0, 0.1, 0.1], useFixedBase=True)
        plane_collision_shape = p.createCollisionShape(p.GEOM_BOX, halfExtents=[10, 10, 0.1])
        plane_id = p.createMultiBody(0, plane_collision_shape)
        p.setPhysicsEngineParameter(enableFileCaching=0)
        p.setGravity(0, 0, -9.81)
        self.time_step = 1.0 / 240.0
        p.setTimeStep(self.time_step)
        # 获取关节总数和信息
        self.left_hand_num_joints = p.getNumJoints(self.left_hand_id)
        self.right_hand_num_joints = p.getNumJoints(self.right_hand_id)
        #print(f"机器人关节总数: {self.left_hand_num_joints}")
        rospy.Subscriber("/cb_left_hand_control_cmd",JointState,self.left_hand_cmd_callback,queue_size=10)
        rospy.Subscriber("/cb_right_hand_control_cmd",JointState,self.right_hand_cmd_callback,queue_size=10)
        self.showSim()

    # 左手回调
    def left_hand_cmd_callback(self, msg):
        cmd_pos = list(msg.position)
        self.left_hand_sim_position[0] = self.map_value(cmd_pos[0],to_min=-1.05,to_max=0.49, from_min=0, from_max=255)
        self.left_hand_sim_position[7] = self.map_value(cmd_pos[1],to_min=0.0,to_max=1.66)
        self.left_hand_sim_position[12] = self.map_value(cmd_pos[2],to_min=0.0,to_max=1.66)
        self.left_hand_sim_position[17] = self.map_value(cmd_pos[3],to_min=0.0,to_max=1.66)
        self.left_hand_sim_position[22] = self.map_value(cmd_pos[4],to_min=0.0,to_max=1.66)
        # 五指横摆
        self.left_hand_sim_position[1] = self.map_value(cmd_pos[5],to_min=0.0,to_max=1.45)
        self.left_hand_sim_position[6] = self.map_value(cmd_pos[6],to_min=-0.26,to_max=0.26, from_min=255, from_max=0)
        self.left_hand_sim_position[11] = self.map_value(cmd_pos[7],to_min=-0.26,to_max=0.26, from_min=255, from_max=0)
        self.left_hand_sim_position[16] = self.map_value(cmd_pos[8],to_min=-0.26,to_max=0.26, from_min=255, from_max=0)
        self.left_hand_sim_position[21] = self.map_value(cmd_pos[9],to_min=-0.26,to_max=0.26, from_min=255, from_max=0)
        # 单独大拇指侧摆
        self.left_hand_sim_position[2] = -self.map_value(cmd_pos[10],to_min=0.0,to_max=0.84)
        # 五指中关节弯曲
        self.left_hand_sim_position[3] = -self.map_value(cmd_pos[15],to_min=0.0,to_max=1.34)
        self.left_hand_sim_position[8] = self.map_value(cmd_pos[16],to_min=0.0,to_max=1.36)
        self.left_hand_sim_position[13] = self.map_value(cmd_pos[17],to_min=0.0,to_max=1.36)
        self.left_hand_sim_position[18] = self.map_value(cmd_pos[18],to_min=0.0,to_max=1.36)
        self.left_hand_sim_position[23] = self.map_value(cmd_pos[19],to_min=0.0,to_max=1.36)
    
    # 右手回调
    def right_hand_cmd_callback(self, msg):
        print(msg.position)

    def showSim(self):
        while True:
            p.stepSimulation()
            time.sleep(self.time_step)
            
            # 遍历所有关节并获取数据
            for joint_index in range(self.left_hand_num_joints):
                joint_info = p.getJointInfo(self.left_hand_id, joint_index)
                joint_name = joint_info[1].decode()  # 获取关节名称并解码为字符串
                joint_state = p.getJointState(self.left_hand_id, joint_index)
                joint_position = joint_state[0]
                joint_velocity = joint_state[1]
                motor_torque = joint_state[3]
            print(self.left_hand_sim_position)
            self.set_joint(self.left_hand_id)
                # self.set_joint(self.left_hand_id,0,0.32)
                # self.set_joint(self.left_hand_id,1,1.2)
                # self.set_joint(self.left_hand_id,2,-1.0)
                # self.set_joint(self.left_hand_id,3,-1.46)
                # self.set_joint(self.left_hand_id,7,1.6)
                #print(f"关节名称 {joint_name},关节 {joint_index}: 位置={joint_position:.3f}, 速度={joint_velocity:.3f}, 力矩={motor_torque:.3f}")
    def set_joint(self,hand_id):
        for index, item in enumerate(self.left_hand_sim_position):
            p.setJointMotorControl2(
                bodyUniqueId=hand_id,           # 机器人ID
                jointIndex=index,          # 关节索引
                controlMode=p.POSITION_CONTROL,  # 控制模式：位置控制
                targetPosition=item,  # 目标位置
                force=500                        # 最大力矩限制
            )

    def map_value(self,value, to_min, to_max, from_min=255, from_max=0):
        """
        将一个范围内的值映射到另一个范围，支持输入范围反向（例如 255 对应最小值，0 对应最大值）。

        参数：
        - value: 需要映射的值
        - from_min: 原始范围的最小值
        - from_max: 原始范围的最大值
        - to_min: 目标范围的最小值
        - to_max: 目标范围的最大值

        返回：
        - 映射后的值
        """
        # 检查原始范围是否有效
        if from_min == from_max:
            raise ValueError("原始范围的最小值和最大值不能相等")
        
        # 反转范围处理：如果 from_min > from_max，则调整计算顺序
        if from_min > from_max:
            scaled_value = (from_min - value) / (from_min - from_max)  # 归一化到 [0, 1]
        else:
            scaled_value = (value - from_min) / (from_max - from_min)  # 正常归一化到 [0, 1]

        # 映射到目标范围
        mapped_value = to_min + scaled_value * (to_max - to_min)
        return mapped_value

if __name__ == "__main__":
    #2.初始化 ROS 节点:命名(唯一)
    rospy.init_node("linker_hand_pybullet", anonymous=True)
    lp = LinkerHandPybullet()


