# --------------------------------------------------------
# LEAP Hand: Low-Cost, Efficient, and Anthropomorphic Hand for Robot Learning
# https://arxiv.org/abs/2309.06440
# Copyright (c) 2023 Ananye Agarwal
# Licensed under The MIT License [see LICENSE for details]
# --------------------------------------------------------
# Based on: IsaacGymEnvs
# Copyright (c) 2018-2022, NVIDIA Corporation
# Licence under BSD 3-Clause License
# https://github.com/NVIDIA-Omniverse/IsaacGymEnvs/
# --------------------------------------------------------

# used to create the object
name: LeapHandRot
physics_engine: ${..physics_engine}
on_evaluation: False

env:
  # environment basic
  numEnvs: ${resolve_default:16384,${...num_envs}}
  numObservations: 126
  numActions: 20
  envSpacing: 0.25
  phase_period: 2
  exec_lag: 1

  episodeLength: 600
  enableDebugVis: False  #True  #False
  aggregateMode: 1

  controller:
    torque_control: False
    controlFrequencyInv: 6  # 20Hz
    pgain: 3
    dgain: 0.2

  genGrasps: False

  clipObservations: 5.0
  clipActions: 1.0
  reset_height_threshold: 0.4
  grasp_cache_name: 'custom_grasp_cache7080' # This must be supplied via command line
  grasp_cache_len: 1024

  # Random forces applied to the object
  forceScale: 10.0
  randomForceProbScalar: 0.25
  forceDecay: 0.9
  forceDecayInterval: 0.08

  reward:
    angvelClipMin: -0.25
    angvelClipMax: 0.25
    rotateRewardScale: 0.0
    objLinvelPenaltyScale: -0.3
    poseDiffPenaltyScale: -0.1
    torquePenaltyScale: -0.1
    workPenaltyScale: -1.0  #-1.0

  additional_rewards:
    rotate_finite_diff: 1.25  #1.25
    object_fallen: -10 

  override_object_init_z: 0.57
  override_object_init_x: -0.03 
  override_object_init_y: 0.04
#左手的
  # canonical_pose:
  #   - 0.1168
  #   - 0.8575
  #   - -1.1554
  #   - 0.0000
  #   - -0.1260
  #   - 0.0604
  #   - -1.5700
  #   - -0.4388
  #   - 0.6723
  #   - -1.3647
  #   - 0.0000
  #   - -0.0611
  #   - 0.7367 
  #   - -1.0668
  #   - -0.3985
  #   - -0.2600
  #   - 1.3000
  #   - 0.0000
  #   - -0.2214
  #   - 0.0000
  #右手的
  # canonical_pose:
  #   - -0.1800
  #   - 0.1409
  #   - 1.5172
  #   - 0.1248
  #   - 0.1800
  #   - 0.0000
  #   - 1.5154
  #   - 1.0426
  #   - 0.0000
  #   - 1.5027
  #   - 0.8011
  #   - 0.0489
  #   - 0.0144 
  #   - 1.5354
  #   - 0.6562
  #   - -0.2600
  #   - -1.3000
  #   - -0.0000
  #   - -0.0000
  #   - -0.6723
  #实验的
  canonical_pose:
    - -0.1800
    - 0.1409
    - 1.5172
    - 0.1248
    - 0.1800
    - 0.0000
    - 1.5154
    - 1.0426
    - 0.0000
    - 1.5027
    - 0.8011
    - 0.0489
    - 0.0144 
    - 1.5354
    - 0.6562
    - 0.0500
    - -1.0500
    - -0.0715
    - 0.0000
    - -1.1393
  # canonical_pose:
  #   - 0.00
  #   - 1.57
  #   - 0.000
  #   - 0.000
  #   - 0.000
  #   - 1.57
  #   - 0.000
  #   - 0.000
  #   - 0.0000
  #   - 1.57
  #   - 0.000
  #   - 0.000
  #   - 0.000
  #   - 0.000
  #   - 0.000
  #   - 0.000
  #   - 0.000
  #   - 0.000
  #   - 0.0000
  #   - 0.000
  num_contact_fingers: 0
  baseObjScale: 0.8
  randomization:
    # Randomization Property
    randomizeMass: True
    randomizeMassLower: 0.01
    randomizeMassUpper: 0.25
    randomizeCOM: True
    randomizeCOMLower: -0.01
    randomizeCOMUpper: 0.01
    randomizeFriction: True
    randomizeFrictionLower: 0.3
    randomizeFrictionUpper: 3.0
    randomizeScale: True
    # if scale_list_init is True, randomizeScaleLower and randomizeScaleUpper is not useful
    scaleListInit: True  #这个就是启用域随机化的一个开关把，如果为false的话就是按照lower和upper进行
    randomizeScaleList: [0.9,0.95,1.0,1.05,1.1]     #0.75,0.8,0.85,
    randomizeScaleLower: 0.75  # only useful when not scaleListInit
    randomizeScaleUpper: 0.8  # only useful when not scaleListInit
    randomizePDGains: True
    randomizePGainLower: 2.9
    randomizePGainUpper: 3.1
    randomizeDGainLower: 0.09
    randomizeDGainUpper: 0.11

  privInfo:
    enableObjPos: True
    enableObjScale: True
    enableObjMass: True
    enableObjCOM: True
    enableObjFriction: True

  object:
    type: 'cube' # can be block, egg or pen
    sampleProb: [1.0]

  # sim_to_real_indices: [1, 0, 2, 3, 9, 8, 10, 11, 13, 12, 14, 15, 4, 5, 6, 7]
  # real_to_sim_indices: [1, 0, 2, 3, 12, 13, 14, 15, 5, 4, 6, 7, 9, 8, 10, 11]     #这个是抓取时候显示的那个索引
  sim_to_real_indices: [17, 1, 8, 12, 5, 16, 0, 11, 4, 15, 18, 2, 9, 13, 6, 19, 3, 10, 14 ,7]
  real_to_sim_indices: [6, 1, 11, 16, 8, 4, 14, 19, 2, 12, 17, 7, 3, 13, 18, 9, 5, 0, 10, 15]
  urdf_to_real_indices: [5, 6, 7, 8, 16, 17, 18, 19, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4]
  asset:
    handAsset: 'assets/leap_hand/robot.urdf'
    # handAsset: 'assets/leap/leap.urdf'
    # handAsset: 'assets/leap_hand/wider_hand_export/robot.urdf'
    # handAsset: 'assets/leap_hand/wider_hand_export/robot_modified.urdf'

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

sim:
  dt: 0.0083333 # 120 Hz
  substeps: 1  #将每个物理步骤在分成一个小步骤，但是其物理步骤还是dt
  up_axis: 'z'
  use_gpu_pipeline: ${eq:${...pipeline},'gpu'}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:'cuda',${....sim_device}} # set to False to run on CPU
    num_position_iterations: 8
    num_velocity_iterations: 0
    max_gpu_contact_pairs: 8388608 #8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_offset: 0.002
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 1000.0
    default_buffer_size_multiplier: 5.0
    contact_collection: 2 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)
